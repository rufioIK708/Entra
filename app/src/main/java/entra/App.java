/*
 * This source file was generated by the Gradle 'init' task
 */
package entra;
import com.microsoft.graph.beta.*;
import com.microsoft.graph.beta.models.*;
import com.microsoft.graph.beta.serviceclient.*;
import com.microsoft.graph.beta.identity.*;
//import com.microsoft.graph.core.*;
//import com.microsoft.graph.beta.users.item.authentication.fido2methods.creationoptionswithchallengetimeoutinminutes.CreationOptionsWithChallengeTimeoutInMinutesRequestBuilder;
import com.microsoft.graph.beta.users.item.authentication.methods.item.resetpassword.*;
import com.microsoft.graph.beta.models.odataerrors.*;
//import java.sql.Date;
import javax.swing.*;

import org.checkerframework.checker.units.qual.C;

import javax.smartcardio.*;


import java.awt.*;
//import java.time.OffsetDateTime;
//import java.time.ZonedDateTime;
//import java.util.Date;
//import java.util.Locale;
import java.util.List;
import java.util.ArrayList;

//import com.microsoft.graph.authentication.TokenCredentialAuthProvider;
import com.azure.identity.*;


public class App {

    static boolean isSignedIn = false;
    static User admin;
    static User activeUser;
    static GraphServiceClient graphClient;
    static JTextArea outputArea = null;
    static JTextArea userInfoArea = null;
    final static String clientId = "492bc3cf-c421-4332-9e96-f56547f3ed56";
    final static String tenantId = "common";
    
    // - - These are the authentication method strings from Microsoft Graph
    //       They are used to identify the different MFA methods, they will be used a lot
    //     so they are defined here as constants
    final static String platformCredMethod = "#microsoft.graph.platformCredentialAuthenticationMethod";
    final static String wHFBAuthMethod = "#microsoft.graph.windowsHelloForBusinessAuthenticationMethod";
    final static String tAPAuthMethod = "#microsoft.graph.temporaryAccessPassAuthenticationMethod";
    final static String softOathAuthMethod = "#microsoft.graph.softwareOathAuthenticationMethod";
    final static String phoneAuthMethod = "#microsoft.graph.phoneAuthenticationMethod";
    final static String passwordAuthMethod = "#microsoft.graph.passwordAuthenticationMethod";
    final static String mSAuthenticatorAuthMethod = "#microsoft.graph.microsoftAuthenticatorAuthenticationMethod";
    final static String hardOathAuthMethod = "#microsoft.graph.hardwareOathAuthenticationMethod";
    final static String fido2AuthMethod = "#microsoft.graph.fido2AuthenticationMethod";
    final static String emailAuthMethod = "#microsoft.graph.emailAuthenticationMethod";

    // - - These should not be used anymore and have been deprecated, but have been left in for backwards compatibility?
    final static String appPasswordAuthMethod = "#microsoft.graph.appPasswordAuthenticationMethod";
    final static String phoneAppOTPAuthMethod = "#microsoft.graph.phoneAppOTPAuthenticationMethod";
    final static String phoneAppNotificationAuthMethhod = "#microsoft.graph.phoneAppNotificationAuthenticationMethod";
    final static String passwordlessMSAuthenticatorMethod = "#microsoft.graph.passwordlessMicrosoftAuthenticatorAuthenticationMethod";
    
    // - - Set the scopes the app will need
    final static String[] scopes = new String[] { "user.readwrite.all  User.EnableDisableAccount.All " +
            "UserAuthenticationMethod.ReadWrite.All User.RevokeSessions.All Auditlog.Read.All Policy.Read.All " +
            "user.read GroupMember.Read.All"};
    final static String noActiveUser = "No active user. Please get a user first.";
    //final static JButton toggleButtonDisable = new JButton("Disable Account");
    //final static JButton toggleButtonEnable = new JButton("Enable Account");
    final static boolean shouldFill = true;
    final static boolean shouldWeightX = true;
    final static boolean RIGHT_TO_LEFT = false;
 

    public static void addComponentsToPane(Container pane) {
        if (RIGHT_TO_LEFT) {
            pane.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        }
 
        JButton button;
        JTextArea textArea;
        String toggleButton = "Enable/Disable Account";

        pane.setLayout(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        if (shouldFill) {
        //natural height, maximum width
        c.fill = GridBagConstraints.HORIZONTAL;
        }
        
        textArea = new JTextArea();
        if(null != activeUser)
            textArea.setText("The selectect user is: " + activeUser.getDisplayName());
        else
            textArea.setText("No user selected");
        
        textArea.setEditable(false);
        textArea.setBackground(pane.getBackground()); // make background same as pane
        userInfoArea = textArea;
        c.fill = GridBagConstraints.HORIZONTAL;
        c.gridx = 0;
        c.gridy = 0;
        c.gridwidth = 2;
        pane.add(textArea, c);

        button = new JButton("Sign Out");
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 0.5;
        c.gridx = 3;
        c.gridy = 0;
        c.gridwidth = 1;
        button.addActionListener(e -> signOut_click((JFrame) SwingUtilities.getWindowAncestor(pane)));
        pane.add(button, c);

        button = new JButton("Get a User");
        if (shouldWeightX) {
        c.weightx = 0.5;
        }
        c.fill = GridBagConstraints.HORIZONTAL;
        c.gridx = 0;
        c.gridy = 1;
        c.gridwidth = 1;
        button.addActionListener(e -> getAUser_click((JFrame) SwingUtilities.getWindowAncestor(pane)));
        pane.add(button, c);
    
        button = new JButton("Get User Security Methods");
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 0.5;
        c.gridx = 1;
        c.gridy = 1;
        c.gridwidth = 1;
        button.addActionListener(e -> getUserMFA_Click((JFrame) SwingUtilities.getWindowAncestor(pane)));
        pane.add(button, c);
    
        button = new JButton("Reset Password");
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 0.5;
        c.gridx = 2;
        c.gridy = 1;
        c.gridwidth = 1;
        button.addActionListener(e -> resetPassword_Click((JFrame) SwingUtilities.getWindowAncestor(pane)));
        pane.add(button, c);

        button = new JButton("Update ImmutableId");
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 0.5;
        c.gridx = 3;
        c.gridy = 1;
        c.gridwidth = 1;
        button.addActionListener(e -> updateImmutableId_Click((JFrame) SwingUtilities.getWindowAncestor(pane)));
        pane.add(button, c);
    
        if (activeUser != null && activeUser.getAccountEnabled())
            toggleButton = "Disable Account";
        else if (activeUser != null && !activeUser.getAccountEnabled())
            toggleButton = "Enable Account";
        button = new JButton(toggleButton);
        button.setName("toggleButton");
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 0.0;
        c.gridwidth = 1;
        c.gridx = 0;
        c.gridy = 2;
        button.addActionListener(e -> toggleAccount_Click((JFrame) SwingUtilities.getWindowAncestor(pane)));
        pane.add(button, c);

        button = new JButton("Add a Security Method");
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 0.0;
        c.gridwidth = 1;
        c.gridx = 1;
        c.gridy = 2;
        button.addActionListener(e -> addMethod_Click());
        pane.add(button, c);

        button = new JButton("Reset/Re-register MFA");
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 0.0;
        c.gridwidth = 1;
        c.gridx = 2;
        c.gridy = 2;
        button.addActionListener(e -> reregisterMFA_Click((JFrame) SwingUtilities.getWindowAncestor(pane)));
        pane.add(button, c);

        button = new JButton("Remove a Security Method");
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 0.0;
        c.gridwidth = 1;
        c.gridx = 3;
        c.gridy = 2;
        button.addActionListener(e -> removeMethod_Click((JFrame) SwingUtilities.getWindowAncestor(pane)));
        pane.add(button, c);

        button = new JButton("Register Fido2 Passkey");
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 0.0;
        c.gridwidth = 1;
        c.gridx = 0;
        c.gridy = 3;
        button.addActionListener(e -> registerFido2Passkey_Click((JFrame) SwingUtilities.getWindowAncestor(pane)));
        pane.add(button, c);

        button = new JButton("Revoke Sing-in Sessions");
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 0.0;
        c.gridwidth = 1;
        c.gridx = 1;
        c.gridy = 3;
        button.addActionListener(e -> revokeSignInSessions_click((JFrame) SwingUtilities.getWindowAncestor(pane)));
        pane.add(button, c);

        button = new JButton("Add a TAP Method");
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 0.0;
        c.gridwidth = 1;
        c.gridx = 2;
        c.gridy = 3;
        button.addActionListener(e -> createTAP_click((JFrame) SwingUtilities.getWindowAncestor(pane)));
        pane.add(button, c);
    
        /*************************************
         * Keeping this here for reference
        button = new JButton("6");
        c.fill = GridBagConstraints.HORIZONTAL;
        c.ipady = 0;       //reset to default
        c.weighty = 1.0;   //request any extra vertical space
        c.anchor = GridBagConstraints.PAGE_END; //bottom of space
        c.insets = new Insets(10,0,0,0);  //top padding
        c.gridx = 1;       //aligned with button 2
        c.gridwidth = 2;   //2 columns wide
        c.gridy = 3;       //third row
        pane.add(button, c);
        *************************************/
        textArea = new JTextArea();
        textArea.setText("Output will be shown here...\n\n");
        textArea.setEditable(false);
        textArea.setFont(new Font("Comic Mono", Font.PLAIN, 14));
        textArea.setBackground(java.awt.Color.BLACK);
        textArea.setForeground(java.awt.Color.GREEN);
        textArea.setName("outputArea");
        JScrollPane textScrollPane = new JScrollPane(textArea);
        textScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);

        c.fill = GridBagConstraints.BOTH;      
        //c.ipady = 40;      //make this component tall
        c.weightx = 1.0;
        c.weighty = 1.0;   //request any extra vertical space
        c.gridwidth = 4;
        c.gridx = 0;
        c.gridy = 4;
        outputArea = textArea;
        pane.add(textScrollPane, c);
    }

    // Method to remove all components from a container and repaint it
    public static void removeComponentsFromPane(Container pane) {
        pane.removeAll();
        pane.repaint();
    }

    // Method to create the Sign In button and add it to the frame/
    public static void createSignInButton(JFrame frame) {
        // Remove all components from the frame's content pane
        removeComponentsFromPane(frame.getContentPane());

        // Set layout manager
        frame.getContentPane().setLayout(new java.awt.FlowLayout());
        frame.setSize(200, 100);
        // Create a button
        JButton signInButton = new JButton("Sign In!");
        signInButton.setSize(20, 10);
        //signInButton.setBackground(java.awt.Color.BLUE);
        signInButton.addActionListener(e -> signIn_click(frame));
        
        // Add button to the frame
        frame.getContentPane().add(signInButton);

        //redraw the pane
        frame.getContentPane().revalidate();
        
    }
    public String getGreeting(){
        return "Hello World!";
    }

    public static void main(String[] args) {

        //System.out.println("Hello, " + me.getDisplayName());
        //System.out.println("Temporary Access Pass: " + result.getTemporaryAccessPass());
        //System.out.println("Temporary Access Pass Start DateTime: " + result.getStartDateTime());
        //System.out.println("Temporary Access Pass Lifetime in Minutes: " + result.getLifetimeInMinutes());
        //System.out.println("The pass was created at: " + result.getCreatedDateTime());

        // Create the frame (window)
        JFrame frame = new JFrame("Simple Entra GUI App");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(200, 100);
        frame.setLocation(300, 300);
        createSignInButton(frame);
        frame.setVisible(true);
        
    }

    // Click on Sign Out button
    // This will reset the state of the app and remove the sign in button
    // and add the sign in button back to the frame.
    public static void signOut_click(JFrame frame) {

        // Reset the state of the app
        frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        isSignedIn = false;
        admin = null;
        activeUser = null;
        graphClient = null;

        createSignInButton(frame);

        frame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }

    // Click on Sign In button
    // This will sign in the user and get the admin details
    // and display them in the output area.
    // It will also remove the sign in button and add the main components to the frame.
    public static void signIn_click(JFrame frame) {

        User me = new User();

        InteractiveBrowserCredential token = new InteractiveBrowserCredentialBuilder().clientId(clientId)
            .tenantId(tenantId).redirectUrl("http://localhost").build();

        graphClient = new GraphServiceClient(token, scopes);
        try {
            me = graphClient.me().get();
            isSignedIn = true;
        } catch (ODataError ex) {
            System.out.println("Error getting user: " + ex.getMessage());
        }

        if (isSignedIn)
        {
            admin = me;
            //disapper the sign in button
            //signInButton.setVisible(false);
            frame.getContentPane().removeAll();
            frame.setSize(1000, 500);
            frame.getContentPane().revalidate();
            //frame.setVisible(false);
            
            addComponentsToPane(frame.getContentPane());   

            String outputString = "Admin details : \n" +
                    "Display Name            : " + admin.getDisplayName() + "\n" +
                    "User Principal Name     : " + admin.getUserPrincipalName() + "\n" +
                    "ID                      : " + admin.getId() + "\n" +
                    "Account Enabled         : " + admin.getAccountEnabled() + "\n" +
                    "OnPremises Immutable ID : " + admin.getOnPremisesImmutableId() + "\n" +
                    "Password Policies       : " + admin.getPasswordPolicies() + "\n" + "\n";

            outputArea.append(outputString);
        }
        else
        {
            JOptionPane.showMessageDialog(frame, "Sign in failed. Please try again.");
        }

        
    }

    // Click on Get a User button
    // This will prompt the user for a User Principal Name (UPN) and get the user details
    // and display them in the output area.
    public static void getAUser_click(JFrame frame) {
        String userPrincipalName = JOptionPane.showInputDialog(frame, "Enter the User Principal Name (UPN) of the user:");

        if (userPrincipalName != null && !userPrincipalName.isEmpty()) {
            frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {
                User user = graphClient.usersWithUserPrincipalName(userPrincipalName).get();
                activeUser = user;
                JOptionPane.showMessageDialog(frame, "User found: " + user.getDisplayName());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(frame, "Error getting user: " + ex.getMessage());
                activeUser = null;
            }
            frame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        } else {
            JOptionPane.showMessageDialog(frame, "User Principal Name cannot be empty.");
            activeUser = null;
            return;
        }

        if (activeUser != null && userInfoArea != null) {
            userInfoArea.setText("The selected user is: " + activeUser.getDisplayName());
        }

        if (activeUser != null && outputArea != null) {
            String outputString = "User Details:\n" +
                    "Display Name            : " + activeUser.getDisplayName() + "\n" +
                    "User Principal Name     : " + activeUser.getUserPrincipalName() + "\n" +
                    "ID                      : " + activeUser.getId() + "\n" +
                    "Account Enabled         : " + activeUser.getAccountEnabled() + "\n" +
                    "OnPremises Immutable ID : " + activeUser.getOnPremisesImmutableId() + "\n" +
                    "Password Policies       : " + activeUser.getPasswordPolicies() + "\n" +
                    "\n";
                    
            
                    //"RefreshTokens Valid From : " + activeUser.getva() + "\n";

            outputArea.append(outputString);
        }
        
        JButton button = new JButton();

        //get the button
        for (Component comp : frame.getContentPane().getComponents()) {
            if (comp instanceof JButton) {
                if (((JButton)comp).getText().contains("Account"))
                    button = ((JButton)comp);
        }
        //update the button.
        if (activeUser != null && activeUser.getAccountEnabled())
            button.setText("Disable Account");
        else
            button.setText("Enable Account");
        }
    }

    // Click on Get User Security Methods button
    // This will get the security methods for the active user and display them in the output area
    public static void getUserMFA_Click(JFrame frame) {
        if (null == activeUser)
            JOptionPane.showMessageDialog(null, noActiveUser);
        else {
            //change the cursor, we might be a while
            frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            MFAExtras.getAndPrintUserMFA();
            //change the cursor back
            frame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }    
    }

    public static void resetPassword_Click(JFrame frame) {
        //check if the active user is null
        if (null == activeUser) {
            JOptionPane.showMessageDialog(null, noActiveUser);
        }
        //it's not, so we can continue
        else {
            //initialize and set the strings for the input & message box
            String message = "Reset the password for : " + App.activeUser.getDisplayName() + "\n";
            message += "\n\nPlease enter the new password, or \"System\" to let Entra     \n";
            message += "generate one for you.";

            String passwordSystem = "The Entra generated password is : ";
            String passwordReset = "Password reset successfully!";
            String passwordCatch = "Error resetting password.";

            //get the input from the user
            String password = JOptionPane.showInputDialog(null,message);
            var requestBody = new ResetPasswordPostRequestBody();

            
            if (null != password && !password.isEmpty()) {
                //change the cursor, we might be a while
                frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                //check the input, if they didn't enter "system"
                // then they entered the new password
                if (!password.equalsIgnoreCase("system")) {
                    requestBody.setNewPassword(password);
                    //JOptionPane.showMessageDialog(null, password.equalsIgnoreCase("system"));
                }
                try {
                    //send the request to reset the password
                    var result = graphClient.users().byUserId(activeUser.getId()).authentication().methods()
                        .byAuthenticationMethodId(MFAExtras.passwordId).resetPassword().post(requestBody);
                    //if Entra created the password, we need to display to the admin.
                    if (password.equalsIgnoreCase("system"))
                        JOptionPane.showMessageDialog(frame, passwordReset + "\n" 
                            + passwordSystem + result.getNewPassword());
                    else 
                        JOptionPane.showMessageDialog(frame, passwordReset);     
                }
                catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, passwordCatch + ex.getMessage());
                }
                //all done, set the cursor back
                frame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
            else {
                //if the user entered nothing, we will not reset the password
                //JOptionPane.showMessageDialog(null, "Password reset cancelled.");
            }
        }
    }

    //update the immutableId of the active user
    public static void updateImmutableId_Click(JFrame frame) {
        //check if the active user is null
        if (null == activeUser) {
            JOptionPane.showMessageDialog(frame, noActiveUser);
        }
        // it is not, we can continue
        else {
            String message = "The current ImmutableID for " + activeUser.getDisplayName() + " is: " + activeUser.getOnPremisesImmutableId();
            message += "\nPlease enter the new ImmutableId below or \"Clear\" to clear it.";
            //get the update from the admin
            String immutableId = JOptionPane.showInputDialog(frame, message, "Update ImmutableId", 0);

            frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

            if (!immutableId.isEmpty()) {
                //update the immutableId on the stored user
                if (immutableId.equalsIgnoreCase("clear"))
                    activeUser.setOnPremisesImmutableId(null);
                else
                    activeUser.setOnPremisesImmutableId(immutableId);
                
                try {
                    //update user
                    graphClient.users().byUserId(activeUser.getId()).patch(activeUser);
                }
                catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Error updating ImmutableId.\n" + ex.getMessage());
                }
            }
            //set the cursor back to default
            frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        }
    }

    //toggle account enabled status
    public static void toggleAccount_Click(JFrame frame) {
        //check if the active user is null
        if (activeUser == null) {
            JOptionPane.showMessageDialog(null, noActiveUser);
        }
        // it is not, we can continue
        else {
            //switch the state
            //activeUser.setAccountEnabled(!activeUser.getAccountEnabled());
            User user = activeUser;

            if(user.getAccountEnabled())
                user.setAccountEnabled(false);
            else
                user.setAccountEnabled(true);
            //JOptionPane.showMessageDialog(frame, activeUser.getAccountEnabled().toString(), "Account enabled value", 0);
            
            try {
                //update the user
                activeUser = graphClient.users().byUserId(user.getId()).patch(user);
            }
            catch (ODataError ex) {
                JOptionPane.showMessageDialog(null, "Error updating user.\n" + ex.getMessage() + "\n"
                    + ex.getError().getInnerError().getOdataType());
            }

            JButton button = new JButton();

            //get the button
            for (Component comp : frame.getContentPane().getComponents()) {
                if (comp instanceof JButton) {
                    if (((JButton)comp).getName().equals("toggleButton"))
                        button = ((JButton)comp);
                }
            }
            //update the button.

            activeUser = graphClient.users().byUserId(activeUser.getId()).get();

            if (null == activeUser) 
                JOptionPane.showMessageDialog(null, "Error updating user. Please try again.");
            else if (null != activeUser && activeUser.getAccountEnabled())
                button.setText("Disable Account");
            else if (null != activeUser && !activeUser.getAccountEnabled()) 
                button.setText("Enable Account");
            
        }
    }

    //add a security method.
    public static void addMethod_Click() {
        //check if the active user is null
        if (activeUser == null) {
            JOptionPane.showMessageDialog(null, noActiveUser);
        }
        // it is not, we can continue
        else {
            //create the window
            MFAExtras.createAddMethodWindow();
        }
    }
    
    // require re-register MFA
    public static void reregisterMFA_Click(JFrame frame) {
        //check if the active user is null
        if (null == activeUser) {
            JOptionPane.showMessageDialog(null, noActiveUser);
        }
        // it is not, we can continue
        else {
            //change the cursor, we might be a while
            frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            
            List<AuthenticationMethod> methods = null;
            List<AuthenticationMethod> cantdelete = new ArrayList<>();
            String defaultMethod = MFAExtras.getDefaultMethod();
            
            methods = MFAExtras.getUserMfaMethods();
            
            for (int i = 0; i < 3; i++) {
                for (AuthenticationMethod method : methods) {
                    if (method instanceof PasswordAuthenticationMethod || method instanceof EmailAuthenticationMethod) {
                        continue; // skip password and email methods
                    } else {
                        try {
                            MFAExtras.deleteMethod(method.getId());
                        } catch (ODataError ex) {
                            // if the method cannot be deleted, add it to the list
                            //cantdelete.add(method);
                        }
                    }
                }
            }
            
            //change the cursor back
            frame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }

    // remove a security method
    public static void removeMethod_Click(JFrame frame) {
         //check if the active user is null
        if (null == activeUser) {
            JOptionPane.showMessageDialog(null, noActiveUser);
        }
        // it is not, we can continue
        else {
            Boolean successful = false;
            String message = "Please enter the method ID you wish to remove";
            String title = "Remove Authenticaiton Method";
            String methodId = JOptionPane.showInputDialog(null, message, title, 0);

            frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

            if (null != methodId && !methodId.isEmpty()){
                successful = MFAExtras.deleteMethod(methodId);
                
                if (successful) {
                    outputArea.append(MFAExtras.getMethodName(MFAExtras.getAuthenticationMethod(methodId))
                         + " method has been deleted. \n");
                    outputArea.scrollRectToVisible(outputArea.getVisibleRect());
                }
                else {
                    JOptionPane.showMessageDialog(frame, "Error deleting method. Please try again.");
                }
            }

            frame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }

    // Click on Register Fido 2 Sessions button
    public static void registerFido2Passkey_Click(JFrame frame) {

        //1. Request creationOptions for the user.
        //2. Provision the passkey credential with creationOptions.
        //3. Register the provisioned credential with Entra
        //check if the active user is null
        if (null == activeUser) {
            JOptionPane.showMessageDialog(frame, noActiveUser);
        }
        // it is not, we can continue
        else {
            //change the cursor, we might be a while
            frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            Integer timeout = 5;
            //Get the Fido2 Passkey registration configuration
            WebauthnCredentialCreationOptions fido2Config = null;
            
            //CreationOptionsWithChallengeTimeoutInMinutesRequestBuilder fido2Config = null;
            try {
                fido2Config = graphClient.users().byUserId(activeUser.getId()).authentication()
                    .fido2Methods().creationOptionsWithChallengeTimeoutInMinutes()
                    .get(requestConfiguration -> {
                        requestConfiguration.queryParameters.challengeTimeoutInMinutes = timeout;
                    });
                //fido2Config = graphClient.users().byUserId(activeUser
            }
            catch (ODataError ex) {
                outputArea.append("Error getting Fido2 Passkey registration configuration.\n" + ex.getMessage());;
            }

            if (null != fido2Config) {
                //create the window to provision the passkey
                outputArea.append("Fido2 Passkey registration configuration found.\n");
                outputArea.append(fido2Config.getPublicKey().getChallenge());

                try {
                    TerminalFactory factory = TerminalFactory.getDefault();
                    CardTerminal terminal = factory.terminals().list().get(0); // Select the first terminal
                    Card card = terminal.connect("T=1"); // Connect to the card
                    CardChannel channel = card.getBasicChannel();

                    // Example CTAP command (e.g., authenticatorGetInfo)
                    byte[] command = new byte[]{(byte) 0x00, (byte) 0xA4, (byte) 0x04, (byte) 0x00, (byte) 0x00};
                    CommandAPDU apdu = new CommandAPDU(command);
                    ResponseAPDU response = channel.transmit(apdu);

                    outputArea.append("Response: " + bytesToHex(response.getBytes()));
                    card.disconnect(false);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            
            } else {
                JOptionPane.showMessageDialog(null, "No Fido2 Passkey registration configuration found. Please create one first.");
            }
            
            //set the cursor back to default
            frame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }
    //revoke sign-in sessions
    public static void revokeSignInSessions_click(JFrame frame) {
        //check if the active user is null
        if (null == activeUser) {
            JOptionPane.showMessageDialog(frame, noActiveUser);
        }
        // it is not, we can continue
        else {
            //get the confirmation from the user
            int response = JOptionPane.showConfirmDialog(frame, "Are you sure you want to revoke sign-in sessions for "
                + activeUser.getDisplayName() + "?", "Revoke Sign-in Sessions", JOptionPane.YES_NO_OPTION);
            
            if (response == JOptionPane.YES_OPTION) {
                frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                try {
                    graphClient.users().byUserId(activeUser.getId()).revokeSignInSessions().post();
                    JOptionPane.showMessageDialog(frame, "Sign-in sessions revoked successfully.");
                } catch (ODataError ex) {
                    JOptionPane.showMessageDialog(frame, "Error revoking sign-in sessions.\n" + ex.getMessage());
                }
                frame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
        }
    }

    //create a TAP for the user
    public static void createTAP_click(JFrame frame) {
        //1. Get the TAP method policy
        //2. Modify the form to show the options
        //3. Get the input from the user
        //4. Generate the request from the input
        //5. Submit the request
        //6. Display the result


        //check if the active user is null
        if (null == activeUser) {
            JOptionPane.showMessageDialog(frame, noActiveUser);
        }
        // it is not, we can continue
        else {
            //1. Get the TAP method policy
            frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            
            TemporaryAccessPassAuthenticationMethodConfiguration tapPolicy = null;;
            try{
                tapPolicy = (TemporaryAccessPassAuthenticationMethodConfiguration)graphClient.policies()
                    .authenticationMethodsPolicy().authenticationMethodConfigurations()
                    .byAuthenticationMethodConfigurationId("TemporaryAccessPass").get();
            }
            catch (ODataError ex) {
                JOptionPane.showMessageDialog(null, "Error getting TAP method policy.\n" + ex.getMessage());
            }

            frame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            
            if (tapPolicy == null) {
                JOptionPane.showMessageDialog(frame, "No TAP method policy found. Please create one first.");
            }
            else if (tapPolicy.getState() == AuthenticationMethodState.Disabled) {
                JOptionPane.showMessageDialog(frame, "TAP method policy is disabled. Please enable it first.");
            }
            else if (!MFAExtras.checkGroupMembership(tapPolicy.getExcludeTargets()).equals("None")){
                String message = "The active user is included in a group that is excluded from the TAP method policy.\n"
                    + "Please remove the user from the group, there may be multiple groups.\n"
                    + "The group is: " + graphClient.groups().byGroupId(MFAExtras.checkGroupMembership(tapPolicy.getExcludeTargets()))
                        .get().getDisplayName();
                String title = "TAP Method Policy Exclusion";
                JOptionPane.showMessageDialog(frame, message, title, JOptionPane.WARNING_MESSAGE);
            }   
            else {
                //2. Modify the form to show the options
                //3. Get the input from the user
                MFAExtras.tapData tapData = new MFAExtras.tapData();
                tapData.defaultLifetimeInMins = tapPolicy.getDefaultLifetimeInMinutes();
                tapData.minLifetimeInMins = tapPolicy.getMinimumLifetimeInMinutes();
                tapData.maxLifetimeInMins = tapPolicy.getMaximumLifetimeInMinutes();
                tapData.isUsableOnce = tapPolicy.getIsUsableOnce();

                MFAExtras.createTAPWindow(tapData);
            }
        }
    }

    private static String bytesToHex(byte[] bytes) {
        StringBuilder sb = new StringBuilder();
        for (byte b : bytes) {
            sb.append(String.format("%02X", b));
        }
        return sb.toString();
    }
}
